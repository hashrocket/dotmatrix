# ~/.hashrc
# vim:set ft=sh sw=2 sts=2:

[ -e "$HASHROCKET_DIR" ] || HASHROCKET_DIR="$HOME/hashrocket"
export HASHROCKET_DIR

hcd() {
  cd "$HASHROCKET_DIR/$1"
  if [ -e .git/safe -a ! -L .git/bin ]; then
    ln -s ../bin .git
  fi
}

mux() {
  local name cols
  if [ -n "$1" ]; then
    hcd $1
  fi
  name="$(basename $PWD | sed -e 's/\./-/g')"
  cols="$(tput cols)"
  if ! $(tmux has-session -t $name &>/dev/null); then
    tmux new-session -d -n code -s $name -x${cols-150} -y50 && \
    tmux split-window -t $name:0 \; \
      new-window -a -d -n server -t $name:0 \; \
      select-layout -t $name main-vertical &>/dev/null \; \
      send-keys -t $name:0.1 'vim .' C-m
  fi
  tmux attach-session -t $name
}

git() {
  [ -f "$HOME/.hitch_export_authors" ] && . "$HOME/.hitch_export_authors"
  if command -v hub >/dev/null; then
    command hub "$@"
  else
    command git "$@"
  fi
}

hclone() {
  local url basename example new
  if [ x-f = "x$1" ]; then
    shift
    rm -rf "$HASHROCKET_DIR/`basename $1 .git`"
  fi
  basename="`basename $1 .git`"
  if [ ! -d "$HASHROCKET_DIR/$basename" ]; then
    new=1
    case "$1" in
      *:*) url="$1" ;;
      */*) url="git@github.com:$1.git" ;;
      *)   url="git@github.com:hashrocket/$1.git" ;;
    esac
    git clone "$url" "$HASHROCKET_DIR/$basename" || return 1
    for example in "$HASHROCKET_DIR/$basename"/config/*.example.yml; do
      cp "$example" "${example%.example.yml}.yml"
    done 2>/dev/null
    if [ -f "$HASHROCKET_DIR/$basename/.rvmrc" ] && command -v __rvm_trust_rvmrc >/dev/null; then
      __rvm_trust_rvmrc "$HASHROCKET_DIR/$basename/.rvmrc"
    fi
  fi
  hcd "$basename"
  ln -sf ../bin .git
  if [ ! -f .git/hooks/post-rewrite ]; then
    cat > .git/hooks/post-rewrite <<EOS
#!/bin/sh

GIT_DIR="\$(dirname "\$(dirname "\$0")")"
export GIT_DIR

case "\$1" in
  rebase) exec "\$GIT_DIR/hooks/post-merge" 0 rebase ;;
esac
EOS
  fi
  if [ ! -f .git/hooks/pre-commit ]; then
    echo '#!/bin/sh' > .git/hooks/pre-commit
    echo 'git diff --exit-code --cached -- Gemfile Gemfile.lock >/dev/null || bundle check' >> .git/hooks/pre-commit
  fi
  if [ ! -f .git/hooks/ctags ]; then
    echo '#!/bin/sh' > .git/hooks/ctags
    echo 'rm -f .git/tags' >> .git/hooks/ctags
    echo 'ctags --tag-relative -f .git/tags --exclude=.git --exclude=db --exclude=public/uploads --exclude=vendor --exclude=tmp --languages=-javascript,html,sql -R' >> .git/hooks/ctags
    chmod +x .git/hooks/ctags
    for basename in post-checkout post-commit post-merge; do
      echo '#!/bin/sh' > .git/hooks/$basename
      echo '$GIT_DIR/hooks/ctags >/dev/null 2>&1 &' >> .git/hooks/$basename
      chmod +x .git/hooks/$basename
    done
    .git/hooks/ctags
  fi
  echo 'if command -v hookup >/dev/null; then' >> .git/hooks/post-checkout
  echo '  hookup post-checkout "$@"' >> .git/hooks/post-checkout
  echo "fi" >> .git/hooks/post-checkout
  if [ -n "$new" -a -x script/setup ]; then
    script/setup
  fi
}

# Tab completion
if [ -n "$BASH_VERSION" ]; then
  _hcd()
  {
    local cur projects

    [ -r "$HASHROCKET_DIR" ] || return 0

    eval 'COMPREPLY=()'
    cur=${COMP_WORDS[COMP_CWORD]}
    projects=$(\ls "$HASHROCKET_DIR")

    if [ $COMP_CWORD -eq 1 ]; then
      eval 'COMPREPLY=( $(compgen -o filenames -W "$projects" $cur) )'
    fi

    return 0
  }
  complete -F _hcd hcd hclone mux
elif [ -n "$ZSH_VERSION" ]; then
  compctl -/ -S '' -W "$HASHROCKET_DIR" hcd hclone mux
fi

rails_root() {
  (
  dir=${1:-$(pwd)}
  i=0
  while [ "/" != "$dir" -a "$i" -ne 16 ]; do
    if [ -f "$dir/config/environment.rb" ]; then
      echo "$dir"
      return 0
    fi
    dir="$(dirname "$dir")"
    i=$(expr $i + 1)
  done
  return 1
  )
}

stc() {
  (
  local root
  root="`rails_root`"
  [ -n "$root" ] || root=.
  if [ "$root/config/amazon_s3.yml" -nt "$root/tmp/s3cfg" ] || [ -f "$root/config/amazon_s3.yml" -a ! -f "$root/tmp/s3cfg" ]; then
    ruby -ryaml -e '
    c = YAML.load(File.read(ARGV.first))[ENV["RAILS_ENV"]||"development"]
    File.open(ARGV.last,"w") do |f|
    f.puts "access_key = #{c["access_key_id"]}"
    f.puts "secret_key = #{c["secret_access_key"]}"
    end if c.kind_of?(Hash)
    ' "$root/config/amazon_s3.yml" "$root/tmp/s3cfg"
  fi
  if [ -f "$root/tmp/s3cfg" ]; then
    exec s3cmd -c "$root/tmp/s3cfg" "$@"
  else
    exec s3cmd "$@"
  fi
  )
}

script_rails() {
  if [ -f "`rails_root`/script/rails" ]; then
    "`rails_root`/script/rails" "$@"
  else
    local name
    name="$1"
    shift
    "`rails_root`/script/$name" "$@"
  fi
}

twiki () {
  rake db:migrate && rake db:migrate:redo && rake db:test:prepare
}

alias sc='script_rails console'
alias ss='script_rails server -u'
alias sdbc='script_rails dbconsole -p'

alias testify="watchr ~/.watchr.rb"
alias vanguard="guard -c -n false"
alias vangaurd="vanguard"

setup_tmux_pasteboard () {
 git clone https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard.git
 cd tmux-MacOSX-pasteboard
 make
 mv reattach-to-user-namespace ~/bin
 echo 'set-option -g default-command "reattach-to-user-namespace -l zsh"' >> ~/.tmux.conf.local
 cd ..
 rm -rf tmux-MacOSX-pasteboard
}

# Before pushing, ensure all your commits since origin are atomic:
#
# $ atomically rake
atomically () {
  $HASHROCKET_DIR/dotmatrix/bin/atomically $@
}

# Show git commit authorship totals. Options are forwarded to git log
#
# Usage:
# $ contributions                    # for entire repo history
# $ contributions -n30               # authorship for last 30 commits
# $ contributions --since="last week"
contributions () {
  prog='BEGIN{ FS=",? and |, "; OFS=""}
  END{ for(name in count) print count[name],"|",name; print NR,"|TOTAL"}
  { for(i=1; i<=NF; i++) { count[$i]++; } }'

  git log --format="%an" $@ | awk $prog | sort -nr | column -t -s '|'
}

gco () {
  if [[ $1 == '.' ]]; then
    git add -A
    git commit -m "CHECKING OUT CURRENT DIRECTORY" -q
    git reset HEAD^ -q
    git checkout .
  else
    git checkout "$@"
  fi
}

alias gap='git add -p'
alias gb='git branch'
alias gc='git commit -v'
alias gca='git commit -a -v'
alias gd='git diff'
alias gdc='git diff --cached'
alias gdh='git diff HEAD'
alias gl='git pull'
alias glod='git log --oneline --decorate'
alias gln="git ln | perl -ple 's/\*/sprintf(\"%2s\", \$n++)/e' | less"
alias gp='git push'
alias gpr='git pull --rebase'
alias gst='git status'
alias gr='git rebase'
alias grc='git rebase --continue'
alias gra='git rebase --abort'
alias reset-authors='git commit --amend --reset-author -C HEAD'
alias vi='vim'

bettervim="/Applications/MacVim.app/Contents/MacOS/Vim"
[ -f "$bettervim" ] && alias vim="$bettervim"
[ -f "$HOME$bettervim" ] && alias vim="$HOME$bettervim"
